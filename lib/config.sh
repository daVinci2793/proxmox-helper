#!/usr/bin/env bash
#
# Donetick Configuration Management Library
# Functions for handling configuration files
#

backup_config() {
  local backup_file="${CONFIG_DIR}/selfhosted.yaml.backup.$(date +%Y%m%d_%H%M%S)"
  if [[ -f "${CONFIG_DIR}/selfhosted.yaml" ]]; then
    msg_info "Backing up existing configuration..."
    cp "${CONFIG_DIR}/selfhosted.yaml" "$backup_file"
    msg_ok "Configuration backed up to: $backup_file"
    # Store backup path for restoration
    echo "$backup_file" > "${CONFIG_DIR}/.last_backup"
  fi
}

restore_config() {
  local backup_path
  if [[ -f "${CONFIG_DIR}/.last_backup" ]]; then
    backup_path=$(cat "${CONFIG_DIR}/.last_backup")
    if [[ -f "$backup_path" ]]; then
      msg_info "Restoring configuration from backup..."
      cp "$backup_path" "${CONFIG_DIR}/selfhosted.yaml"
      chown "${SERVICE_USER}":"${SERVICE_USER}" "${CONFIG_DIR}/selfhosted.yaml"
      chmod 640 "${CONFIG_DIR}/selfhosted.yaml"
      msg_ok "Configuration restored from backup"
      rm -f "${CONFIG_DIR}/.last_backup"
      return 0
    fi
  fi
  return 1
}

create_default_config() {
  local jwt_secret="$1"
  
  msg_info "Creating configuration file..."
  
  # Download config template
  local config_template_url="${BASE_URL}/templates/selfhosted.yaml"
  local temp_config="/tmp/donetick-config.yaml"
  
  if download_file "$config_template_url" "$temp_config" "configuration template"; then
    # Replace JWT secret placeholder
    sed "s/\${JWT_SECRET}/${jwt_secret}/g" "$temp_config" > "${CONFIG_DIR}/selfhosted.yaml"
    rm -f "$temp_config"
  else
    # Fallback to embedded config if download fails
    create_embedded_config "$jwt_secret"
  fi
  
  msg_ok "Default configuration created at ${CONFIG_DIR}/selfhosted.yaml"
}

create_embedded_config() {
  local jwt_secret="$1"
  
  cat <<EOF > "${CONFIG_DIR}/selfhosted.yaml"
# Donetick Self-Hosted Configuration
# Generated by installer on $(date)
# For more options, see: https://github.com/donetick/donetick/blob/main/config/selfhosted.yaml.dist

name: "selfhosted"
is_done_tick_dot_com: false
is_user_creation_disabled: false

# Database Configuration
database:
  type: "sqlite"
  migration: true

# JWT Authentication
jwt:
  secret: "${jwt_secret}"
  session_time: 168h
  max_refresh: 168h

# Server Configuration
server:
  port: 2021
  read_timeout: 10s
  write_timeout: 10s
  rate_period: 60s
  rate_limit: 300
  cors_allow_origins:
    - "http://localhost:5173"
    - "http://localhost:7926"
    - "https://localhost"
    - "capacitor://localhost"
  serve_frontend: true

# Logging Configuration
logging:
  level: "info"
  encoding: "json"
  development: false

# Scheduler Jobs
scheduler_jobs:
  due_job: 30m
  overdue_job: 3h
  pre_due_job: 3h

# Email Configuration
email:
  host: 
  port: 
  key: 
  email:  
  appHost:  

# OAuth2 Configuration
oauth2:
  client_id: 
  client_secret: 
  auth_url: 
  token_url: 
  user_info_url: 
  redirect_url: 
  name:

# Real-time Configuration
realtime:
  enabled: true
  websocket_enabled: false
  sse_enabled: true
  heartbeat_interval: 60s
  connection_timeout: 120s
  max_connections: 1000
  max_connections_per_user: 5
  event_queue_size: 2048
  cleanup_interval: 2m
  stale_threshold: 5m
  enable_compression: true
  enable_stats: true
  allowed_origins:
    - "*"
EOF
}

create_postgres_config() {
  local jwt_secret="$1"
  local host="$2"
  local port="$3"
  local database="$4"
  local username="$5"
  local password="$6"
  
  msg_info "Creating PostgreSQL configuration file..."
  
  # Download PostgreSQL config template
  local config_template_url="${BASE_URL}/templates/selfhosted-postgres.yaml"
  local temp_config="/tmp/donetick-postgres-config.yaml"
  
  if download_file "$config_template_url" "$temp_config" "PostgreSQL configuration template"; then
    # Replace placeholders
    sed -e "s/\${JWT_SECRET}/${jwt_secret}/g" \
        -e "s/\${PG_HOST}/${host}/g" \
        -e "s/\${PG_PORT}/${port}/g" \
        -e "s/\${PG_DATABASE}/${database}/g" \
        -e "s/\${PG_USERNAME}/${username}/g" \
        -e "s/\${PG_PASSWORD}/${password}/g" \
        "$temp_config" > "${CONFIG_DIR}/selfhosted.yaml"
    rm -f "$temp_config"
  else
    # Fallback to embedded config if download fails
    create_embedded_postgres_config "$jwt_secret" "$host" "$port" "$database" "$username" "$password"
  fi
  
  msg_ok "PostgreSQL configuration created at ${CONFIG_DIR}/selfhosted.yaml"
}

create_embedded_postgres_config() {
  local jwt_secret="$1"
  local host="$2"
  local port="$3"
  local database="$4"
  local username="$5"
  local password="$6"
  
  cat <<EOF > "${CONFIG_DIR}/selfhosted.yaml"
# Donetick Self-Hosted Configuration (PostgreSQL)
# Generated by installer on $(date)
# For more options, see: https://github.com/donetick/donetick/blob/main/config/selfhosted.yaml.dist

name: "selfhosted"
is_done_tick_dot_com: false
is_user_creation_disabled: false

# Database Configuration
database:
  type: "postgres"
  host: "${host}"
  port: ${port}
  name: "${database}"
  user: "${username}"
  password: "${password}"
  sslmode: "disable"
  migration: true

# JWT Authentication
jwt:
  secret: "${jwt_secret}"
  session_time: 168h
  max_refresh: 168h

# Server Configuration
server:
  port: 2021
  read_timeout: 10s
  write_timeout: 10s
  rate_period: 60s
  rate_limit: 300
  cors_allow_origins:
    - "http://localhost:5173"
    - "http://localhost:7926"
    - "https://localhost"
    - "capacitor://localhost"
  serve_frontend: true

# Logging Configuration
logging:
  level: "info"
  encoding: "json"
  development: false

# Scheduler Jobs
scheduler_jobs:
  due_job: 30m
  overdue_job: 3h
  pre_due_job: 3h

# Email Configuration
email:
  host:
  port:
  key:
  email:
  appHost:

# OAuth2 Configuration
oauth2:
  client_id:
  client_secret:
  auth_url:
  token_url:
  user_info_url:
  redirect_url:
  name:

# Real-time Configuration
realtime:
  enabled: true
  websocket_enabled: false
  sse_enabled: true
  heartbeat_interval: 60s
  connection_timeout: 120s
  max_connections: 1000
  max_connections_per_user: 5
  event_queue_size: 2048
  cleanup_interval: 2m
  stale_threshold: 5m
  enable_compression: true
  enable_stats: true
  allowed_origins:
    - "*"
EOF
}

handle_configuration() {
  local is_update="$1"
  local force_install="$2"
  
  mkdir -p "${CONFIG_DIR}"
  
  local config_restored=false
  local config_needs_creation=false
  
  # For updates: try to restore config first
  if [[ "$is_update" == "true" ]]; then
    if restore_config; then
      config_restored=true
      msg_ok "Configuration restored from backup"
    else
      msg_warn "Could not restore configuration backup"
      config_needs_creation=true
    fi
  fi
  
  # For fresh installations or failed restoration: create new config
  if [[ "$is_update" == "false" ]] || [[ "$config_needs_creation" == "true" ]]; then
    if [[ ! -f "${CONFIG_DIR}/selfhosted.yaml" ]]; then
      local jwt_secret=$(openssl rand -base64 32)
      create_default_config "$jwt_secret"
    else
      msg_info "Preserving existing configuration file..."
    fi
  fi
}
